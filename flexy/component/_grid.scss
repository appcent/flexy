/**
 * Calculate column size percentage
 */
@function flexy-column-percent($column-num) {
  @return $column-num / $flexy-grid-columns * 100%;
}

/**
 * Spacing mixin to create uniform margin/padding
 */
@mixin flexy-grid-space($value, $type: margin, $orientation: vertical) {
  @if $orientation == vertical {
    #{$type}-top: $value;
    #{$type}-bottom: $value;
  } @else {
    #{$type}-left: $value;
    #{$type}-right: $value;
  }
}

/**
 * Row wrapper class, flex box parent.
 */
@mixin flexy-grid-row() {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  @include flexy-grid-space(-$flexy-grid-gutter, margin, horizontal);
}

@mixin flexy-grid-column() {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  min-height: 1px;
  transition-property: flex-basis, max-width, -webkit-flex-basis;
  transition-duration: 0.2s;

  &_auto {
    -webkit-box-flex: 1;
    flex: 1 0 auto;
    max-width: 100%;
  }

  @include flexy-grid-space($flexy-grid-gutter, padding, horizontal);
}

@mixin flexy-grid-wrapper() {
  @include flexy-grid-column;
  flex-grow: 1;
  flex-basis: 0;
  max-width: $flexy-grid-wrapper-width;
}

@mixin flexy-grid-reset() {
  margin-left: 0;
}

/**
 * Generate a set of grid column classes using a namespace
 *
 * .#{$flexy-grid-class-col}-[namespace] for intelligent column division
 * .#{$flexy-grid-class-col}-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 * .#{$flexy-grid-class-off}-[namespace]-[number] for pushing a col a specific number of columns (e.g. 1-11 by default)
 * .#{$flexy-grid-class-off}-[namespace]-reset for resetting a col's offset for that and larger namespaces
 */

/**
 * Build the grid in two steps, to help minimize file size
 * Step 1, for each namespace, create the grid-base
 * Step 2, for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */
@mixin flexy-grid-build($namespace) {
  // Run the loop for as many columns as speficied
  @for $i from 1 through $flexy-grid-columns {
    .#{$flexy-prefix}-#{$flexy-grid-class-col}_#{$namespace} {
      @include flexy-grid-wrapper;

      &_#{$i} {
        flex-basis: flexy-column-percent($i);
        max-width: flexy-column-percent($i);
      }
    }

    // Don't include the .off class for the last column
    @if ($i != $flexy-grid-columns) {
      .#{$flexy-prefix}-#{$flexy-grid-class-off}-#{$namespace}-#{$i} {
        margin-left: flexy-column-percent($i);
      }
    }
  }

  .#{$flexy-prefix}-#{$flexy-grid-class-off}-#{$namespace}-reset {
    @include flexy-grid-reset;
  }
}

@each $namespace, $width in $flexy-breakpoints {
  @if ($width == 0) {
    @include flexy-grid-build($namespace);
  } @else {
    @include flexy-media-screen((min-width: $width)) {
      @include flexy-grid-build($namespace);
    }
  }
}

.#{$flexy-prefix} {
  &-#{$flexy-grid-class-col} {
    @include flexy-grid-column;
  }

  &-#{$flexy-grid-class-wrapper} {
    @include flexy-grid-wrapper;
    margin: 0 auto;

    &_left {
      margin-left: 0;
    }

    &_right {
      margin: 0 0 0 auto;
    }
  }

  &-#{$flexy-grid-class-row} {
    @include flexy-grid-row;
  }
}