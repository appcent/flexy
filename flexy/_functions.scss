@function to-string($value) {
  @return inspect($value);
}

@function to-int($number) {
  @return $number / ($number * 0 + 1);
}

@function to-em($pixels, $base-font-size) {
  @return #{$pixels/$base-font-size}em;
}

@function implode($pieces, $glue: "") {
  $result: null;
  @each $piece in $pieces {
    @if type-of($piece) == list {
      $result: unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
    } @else {
      $result: unquote("#{$result}#{$glue}#{$piece}");
    }
  }
  @if $result != null {
    $result: str-slice($result, str-length($glue) + 1, -1);
  }
  @return $result;
}

// Return list-map from `$list` and ensure input list-map is list-of-lists
@function map-convert($list) {
  @if length($list) == 2 and length(nth($list, 1)) == 1 {
    @return append((), $list, 'comma');
  }

  @return $list;
}

// Return previous key from list-map
@function map-prev-key($list, $key) {
  @if map-has-key($list, $key) {
    $list: map-convert($list);
    $keys: map-keys($list);
    $index: index($keys, $key) - 1;

    @return if($index <= 0, null, nth($keys, $index));
  } @else {
    @return null;
  }
}

// Return next key from list-map
@function map-next-key($list, $key) {
  @if map-has-key($list, $key) {
    $list: map-convert($list);
    $keys: map-keys($list);
    $index: index($keys, $key) + 1;

    @return if($index > length($list), null, nth($keys, $index));
  } @else {
    @return null;
  }
}

// If a native exponent function doesnt exist
// this one is needed.
@function pow($base, $exponent) {
  // reset value
  $value: $base;
  // positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }
  // negitive intergers get divided. A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }
  // return the last value written
  @return $value;
}

@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list)*-1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function to-em($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1em;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'em' {
    $value: strip-unit($value) / strip-unit($base) * 1em;
  }

  // Turn 0rem into 0
  @if $value == 0em {
    $value: 0;
  }

  @return $value;
}

/// Converts one or more pixel values into matching rem values.
///
/// @param {Number} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.
///
/// @returns {List} A list of converted values.
@function rem-calc($value, $base: $flexy-body-font-size) {
  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @return to-rem($value, $base);
}

@function em-calc($value, $base: $flexy-body-font-size) {
  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($value) == 'rem' {
    $value: strip-unit($value) * 16px;
  }

  @return to-em($value, $base);
}