// Отступы между блоками. По умолчанию равно отступам между колонками в Grid
$flexy-block-grid-padding: $flexy-grid-gutter !default;

// Использовать flexbox для генерации block-grid? Если нет, то используется полный аналог из foundation
$flexy-block-grid-flexbox: true !default;

@mixin _block-grid-offset() {
  margin: 0;
  box-sizing: border-box;
  padding: 0 ($flexy-block-grid-padding/2) $flexy-block-grid-padding;
}

@mixin _block-grid-calc-legacy($row-num: false) {
  width: 100% / $row-num;

  &:nth-of-type(1n) {
    clear: none;
  }

  &:nth-of-type(#{$row-num}n + 1) {
    clear: both;
  }
}

@function _block-grid-media-map($namespace) {
  $prev: flexy-map-prev-key($flexy-breakpoints, $namespace);
  $next: flexy-map-next-key($flexy-breakpoints, $namespace);

  $media: ();
  @if ($next) {
    $media: (
      min-width: flexy-get-breakpoint($namespace),
      max-width: flexy-get-breakpoint($next) - 0.1px
    );
  } @else {
    $media: (min-width: flexy-get-breakpoint($namespace));
  }

  @return $media;
}

.#{$flexy-prefix} {
  &-block-grid {
    list-style: none;
    padding: 0;
    margin: 0 (-$flexy-block-grid-padding/2);

    & > &__item {
      display: block;
      height: auto;
      @include _block-grid-offset;
    }

    @if $flexy-block-grid-flexbox {
      display: flex;
      flex-wrap: wrap;

      &_left {
        justify-content: flex-start;
      }

      &_center {
        justify-content: center;
      }

      &_space {
        justify-content: space-between;
      }

      &_right {
        justify-content: flex-end;
      }

      @for $i from 1 through $flexy-block-grid-count {
        & > &__item {
          &_fluid {
            width: auto;
            flex: 1 0 100% / $i;
          }
        }

        @each $namespace, $width in $flexy-breakpoints {
          &_#{$namespace}_#{$i} > &__item {
            @include flexy-breakpoint($namespace) {
              width: (100% / $i);
            }

            &_only {
              @include flexy-media(_block-grid-media-map($namespace)) {
                width: 100% / $i;
              }
            }
          }
        }

        @each $namespace, $params in $flexy-devices {
          &_#{$namespace}_#{$i} > &__item {
            @include flexy-device($namespace) {
              width: (100% / $i);
            }
          }
        }
      }
    } @else {
      @include clearfix;
      display: block;

      & > &__item {
        float: left;
      }

      @for $i from 1 through $flexy-block-grid-count {
        @each $namespace, $width in $flexy-breakpoints {
          @include flexy-breakpoint($namespace) {
            &_#{$namespace}_#{$i} > &__item {
              @include _block-grid-calc-legacy($i);
            }
          }
        }

        @each $namespace, $params in $flexy-devices {
          @include flexy-device($namespace) {
            &_#{$namespace}_#{$i} > &__item {
              @include _block-grid-calc-legacy($i);
            }
          }
        }
      }
    }
  }
}
